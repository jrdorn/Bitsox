import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCount } from "./FunctionComponentAPI";

/**
 createSlice

    initial state
    { reducer functions }
    slice name

    generates action creators and types
     corresponding to reducers and state
 */

/**
 createAsyncThunk


    Redux action
    callback that returns a promise

    handles async request lifecycles
    returns thunk action creator that dispatches lifecycle actions based on returned promise

    write your own reducer functions for tracking loading states/ processing returned data
 */

const initialState = {
  value: 0,
  status: "idle",
};

//dispatch action => perform async request
export const incrementAsync = createAsyncThunk(
  "fCount/fetchCount",
  async (amount) => {
    const response = await fetchCount(amount);
    return response.data;
  }
);

//reducer logic and actions for counter
export const fCSlice = createSlice({
  name: "fCount",
  initialState,
  //define reducers and actions
  reducers: {
    //Immer handles "mutating" logic in reducers
    increment: (state) => {
      state.value += 1;
    },
    //decrement count
    decrement: (state) => {
      state.value -= 1;
    },
    //handles incrementIfEven declared later - action.payload returns the processed state
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // extraReducers lets the slice handle outside actions (generated by createAsyncThunk or other slices)
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

//
export const { increment, decrement, incrementByAmount } = fCSlice.actions;

//select value from state
export const selectCount = (state) => state.fCount.value;

//thunk conditionally dispatching actions based on current state
export const incrementIfEven = (x) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 0) {
    dispatch(incrementByAmount(x));
  }
};

//
export default fCSlice.reducer;
